# 🗓️ 20-Day Roadmap  
🔥 **Goal:** Build a working prototype of EyeUX with real-time mouse + eye tracking and AI-powered insights using Azure.

---

## ➡️ **Days 1–2: Initial Setup**  
| **Task** | **Assignee** | **Estimated Time** |
|---------|--------------|--------------------|
| Create GitHub repo & set up Scrum | You | 2 hours |
| Setup Next.js environment | Teammate | 2 hours |
| Setup Flask environment | You | 2 hours |
| Connect Flask and Next.js | Both | 3 hours |

### ✅ Outcome:  
- Repo created  
- Basic folder structure ready  
- Backend and frontend connected  

---

## ➡️ **Days 3–4: Eye Tracking Setup**  
| **Task** | **Assignee** | **Estimated Time** |
|---------|--------------|--------------------|
| Install and configure WebGazer.js | Teammate | 4 hours |
| Create Flask endpoint for receiving eye-tracking data | You | 3 hours |
| Test and refine real-time tracking | Both | 3 hours |

### ✅ Outcome:  
- Eye-tracking data sent to backend  
- Real-time eye-tracking working  

---

## ➡️ **Days 5–6: Mouse Tracking Setup**  
| **Task** | **Assignee** | **Estimated Time** |
|---------|--------------|--------------------|
| Create mouse movement/click tracking with JS | Teammate | 4 hours |
| Add API endpoint for mouse data | You | 3 hours |
| Test and refine mouse tracking | Both | 3 hours |

### ✅ Outcome:  
- Mouse tracking working  
- Data being sent to backend  

---

## ➡️ **Days 7–8: Flask API Integration**  
| **Task** | **Assignee** | **Estimated Time** |
|---------|--------------|--------------------|
| Create Flask route to receive mouse + eye data | You | 4 hours |
| Store data into Azure Cosmos DB | You | 4 hours |
| Send data from frontend to Flask | Teammate | 4 hours |

### ✅ Outcome:  
- Flask handling and storing data  
- Data being passed from frontend → backend  

---

## ➡️ **Days 9–10: Data Preprocessing**  
| **Task** | **Assignee** | **Estimated Time** |
|---------|--------------|--------------------|
| Clean mouse and eye-tracking data | You | 3 hours |
| Design preprocessing pipeline for AI | You | 3 hours |
| Debug and refine data flow | Both | 2 hours |

### ✅ Outcome:  
- Cleaned and structured data  
- Ready for AI analysis  

---

## ➡️ **Days 11–12: AI Model Development**  
| **Task** | **Assignee** | **Estimated Time** |
|---------|--------------|--------------------|
| Train Azure AI model with tracking data | You | 5 hours |
| Create ML model to detect patterns | You | 4 hours |
| Create Flask endpoint to serve AI suggestions | You | 3 hours |

### ✅ Outcome:  
- AI model trained  
- Backend ready to serve AI-generated insights  

---

## ➡️ **Days 13–14: Frontend Data Visualization**  
| **Task** | **Assignee** | **Estimated Time** |
|---------|--------------|--------------------|
| Create heatmap using Chart.js/Heatmap.js | Teammate | 4 hours |
| Display mouse and eye-tracking patterns | Teammate | 4 hours |
| Test and adjust visuals | Both | 3 hours |

### ✅ Outcome:  
- Visual insights showing user behavior  
- AI-driven feedback reflected in UI  

---

## ➡️ **Days 15–16: AI-Generated UX Recommendations**  
| **Task** | **Assignee** | **Estimated Time** |
|---------|--------------|--------------------|
| Fetch AI-generated recommendations from Flask | Teammate | 3 hours |
| Display AI feedback in the UI | Teammate | 3 hours |
| Test and debug end-to-end feedback flow | Both | 3 hours |

### ✅ Outcome:  
- AI recommendations visible in real-time  
- Fully functional tracking-to-feedback pipeline  

---

## ➡️ **Days 17–18: Privacy & Consent**  
| **Task** | **Assignee** | **Estimated Time** |
|---------|--------------|--------------------|
| Add user consent flow (privacy notice) | Teammate | 3 hours |
| Secure data storage with encryption | You | 4 hours |
| Test for data leaks or consent bypasses | Both | 3 hours |

### ✅ Outcome:  
- User consent handled  
- Secure backend & data pipeline  

---

## ➡️ **Days 19–20: Final Testing + Documentation**  
| **Task** | **Assignee** | **Estimated Time** |
|---------|--------------|--------------------|
| Create demo video + final adjustments | Both | 3 hours |
| Write final README and documentation | You | 4 hours |
| Final code cleanup and review | Both | 3 hours |

### ✅ Outcome:  
- Complete working prototype  
- All documentation ready for submission  

---

## 💡 **Azure Integration**  
| **Component** | **Azure Service** | **Purpose** |
|--------------|-------------------|------------|
| **Data Storage** | Azure Cosmos DB | Store tracking and user interaction data |
| **AI Model Training** | Azure Machine Learning | Train model on interaction data |
| **AI Model Serving** | Azure Functions | Serve real-time feedback |
| **NLP Feedback** | Azure OpenAI | Generate intelligent feedback |

---

## 🛠️ **How Everything Works Together**  
1. **Mouse + eye tracking** → Captured in frontend (Next.js)  
2. **Data sent to backend** → Flask receives and stores in Azure Cosmos DB  
3. **AI model processes data** → Azure AI generates recommendations  
4. **AI feedback served** → Flask sends feedback to frontend  
5. **Data visualized** → Heatmaps + recommendations shown in UI  

---

## 👥 **Responsibility Overview**  
| **Task** | **Who's Responsible** |
|------|-------------------------|
| **Frontend (Next.js)** | Teammate |
| **Backend (Flask)** | You |
| **Mouse Tracking** | Teammate |
| **Eye Tracking** | Teammate |
| **Data Storage (Azure Cosmos DB)** | You |
| **AI Integration** | You |
| **AI Feedback Display** | Teammate |
| **Final Testing + Debugging** | Both |

---

## ✅ **Expected Outcome by End of Project**  
✔️ Full AI-based UX tracking system  
✔️ Eye + mouse tracking working in sync  
✔️ Real-time heatmaps and AI-driven recommendations  
✔️ Secure data handling with user consent  
✔️ Fully functional and polished demo  

---
